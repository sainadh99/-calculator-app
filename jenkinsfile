// Declare global variable to store start time
def startTime
 
pipeline {
    agent any
 
    // üîπ Enable GitHub Webhook trigger
    triggers {
        githubPush()   // Runs when GitHub sends a webhook (push event)
    }
 
    environment {
        GIT_CREDENTIALS       = 'github-cal'
        DOCKERHUB_CREDENTIALS = 'dockerhub-creds'
        DOCKER_IMAGE          = 'sainadh99/calculator-app'
        GIT_REPO              = 'https://github.com/sainadh99/-calculator-app.git'
        GIT_BRANCH            = 'master'
        SSH_CRED_ID           = 'vm-ssh-creds'
        DEPLOY_HOST           = '34.134.95.91'
        DEPLOY_DIR            = '/home/ubuntu/calculator-app'
        CONTAINER_NAME        = 'calculator-app'
        APP_PORT              = '3000'
        SLACK_CHANNEL         = '#devops'
        SLACK_CREDENTIAL_ID   = 'token'
        EMAIL_RECIPIENT       = 'sainarne835@gmail.com'
        JOB_NAME_FIXED        = 'ciintegration'   // ‚úÖ Clean job name without spaces
        JENKINS_URL           = 'http://34.134.95.91:8080' // ‚úÖ Jenkins base URL
    }
 
    stages {
        stage('Initializer Timer') {
            steps {
                script {
                    startTime = System.currentTimeMillis()
                    echo "‚è≥ Pipeline started at: ${new Date()}"
                }
            }
        }
 
        stage('Checkout Source Code') {
            steps {
                git branch: "${GIT_BRANCH}",
                    credentialsId: "${GIT_CREDENTIALS}",
                    url: "${GIT_REPO}"
            }
        }
 
        stage('Docker Login') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', "${DOCKERHUB_CREDENTIALS}") {
                        echo "‚úÖ Logged in to DockerHub"
                    }
                }
            }
        }
 
        stage('Build & Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', "${DOCKERHUB_CREDENTIALS}") {
                        sh """
                        docker build -t ${DOCKER_IMAGE}:latest .
                        docker push ${DOCKER_IMAGE}:latest
                        """
                    }
                }
            }
        }
 
        stage('Test SSH to VM') {
            steps {
                script {
                    sshagent(credentials: ["${SSH_CRED_ID}"]) {
                        sh """
                        echo 'üîë Testing SSH Connection...'
                        ssh -o StrictHostKeyChecking=no ubuntu@${DEPLOY_HOST} 'echo "‚úÖ SSH connection successful to \\\$(hostname)"'
                        """
                    }
                }
            }
        }
 
        stage('Deploy to VM') {
            steps {
                script {
                    sshagent(credentials: ["${SSH_CRED_ID}"]) {
                        sh """
                        ssh -o StrictHostKeyChecking=no ubuntu@${DEPLOY_HOST} '
                            echo "‚û°Ô∏è Connected to VM ‚Äì Deploying Calculator App..."
                            docker rm -f ${CONTAINER_NAME} || true
                            docker pull ${DOCKER_IMAGE}:latest
                            docker run -d --name ${CONTAINER_NAME} -p ${APP_PORT}:${APP_PORT} ${DOCKER_IMAGE}:latest
                            echo "‚úÖ App deployed at: http://${DEPLOY_HOST}:${APP_PORT}"
                        '
                        """
                    }
                }
            }
        }
    }
 
    post {
        success {
            script {
                def durationMillis = System.currentTimeMillis() - startTime
                def durationSecs = (durationMillis / 1000).toInteger()
                def mins = durationSecs / 60
                def secs = durationSecs % 60
 
                def buildUrlFixed = "${JENKINS_URL}/job/${JOB_NAME_FIXED}/${env.BUILD_NUMBER}/"
 
                slackSend(
                    channel: "${SLACK_CHANNEL}",
                    color: "good",
                    tokenCredentialId: "${SLACK_CREDENTIAL_ID}",
                    message: """*‚úÖ Jenkins Pipeline Success*
*Job:* ${env.JOB_NAME} (#${env.BUILD_NUMBER})
*URL:* ${buildUrlFixed}
*Duration:* ${mins} min ${secs} sec"""
                )
            }
            echo "üéâ Deployment successful!"
        }
        failure {
            script {
                // Save console logs into a Word document
                sh """
                mkdir -p logs
                curl -s ${env.BUILD_URL}consoleText > logs/console.log
                pandoc logs/console.log -o logs/console_output.docx --standalone
                """
 
                def buildUrlFixed = "${JENKINS_URL}/job/${JOB_NAME_FIXED}/${env.BUILD_NUMBER}/"
 
                // Send email with attachment
                emailext(
                    to: "${EMAIL_RECIPIENT}",
                    subject: "‚ùå Pipeline FAILED: ${env.JOB_NAME} (#${env.BUILD_NUMBER})",
                    body: """The Jenkins pipeline has failed.
 
*Job:* ${env.JOB_NAME} (#${env.BUILD_NUMBER})
*URL:* ${buildUrlFixed}
 
Please find the attached console logs for debugging.""",
                    attachmentsPattern: 'logs/console_output.docx'
                )
 
                slackSend(
                    channel: "${SLACK_CHANNEL}",
                    color: "danger",
                    tokenCredentialId: "${SLACK_CREDENTIAL_ID}",
                    message: """*‚ùå Jenkins Pipeline FAILED*
*Job:* ${env.JOB_NAME} (#${env.BUILD_NUMBER})
*URL:* ${buildUrlFixed}"""
                )
            }
            echo "‚ùå Deployment failed. Email + Slack notification sent."
        }
        always {
            echo "üèÅ Pipeline finished at: ${new Date()}"
        }
    }
}
