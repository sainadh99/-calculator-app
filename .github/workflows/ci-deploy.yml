name: Secure CI/CD Pipeline

on:
  pull_request:
    types: [closed]

env:
  DOCKER_BUILDKIT: 1

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && github.event.pull_request.merged_by.login == 'sainadh99'

    steps:
      # ---------------------------
      # 1️⃣ Checkout code
      # ---------------------------
      - name: Checkout code
        uses: actions/checkout@v4

      # ---------------------------
      # 2️⃣ Generate Build Metadata
      # ---------------------------
      - name: Generate Build Number & Metadata
        id: build_number
        run: |
          BUILD_NUMBER=${{ github.run_number }}
          BUILD_TAG="build-${BUILD_NUMBER}"
          BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV
          echo "BUILD_TAG=$BUILD_TAG" >> $GITHUB_ENV
          echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV

      # ---------------------------
      # 3️⃣ Set up Docker Buildx
      # ---------------------------
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # ---------------------------
      # 4️⃣ Docker Login
      # ---------------------------
      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # ---------------------------
      # 5️⃣ Build & Push Docker Image
      # ---------------------------
      - name: Build & Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            sainadh99/calculator-app:latest
            sainadh99/calculator-app:${{ env.BUILD_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_NUMBER=${{ env.BUILD_NUMBER }}
            BUILD_DATE=${{ env.BUILD_DATE }}
            GIT_COMMIT=${{ github.sha }}

      # ---------------------------
      # 6️⃣ Deploy Secure Container to GCP VM
      # ---------------------------
      - name: Deploy Secure Container to GCP VM
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.GCP_VM_HOST }}
          username: ${{ secrets.GCP_VM_USERNAME }}
          key: ${{ secrets.GCP_VM_KEY }}
          port: 22
          timeout: 60s
          command_timeout: 25m
          script: |
            export HOME=/home/${{ secrets.GCP_VM_USERNAME }}
            
            # Determine Docker command
            DOCKER_CMD="docker"
            if ! $DOCKER_CMD info >/dev/null 2>&1; then
              DOCKER_CMD="sudo docker"
            fi
            
            # Create seccomp profile directory
            mkdir -p $HOME/docker-seccomp
            
            # Create enhanced seccomp profile
            cat << 'EOF' > $HOME/docker-seccomp/seccomp.json
            {
              "defaultAction": "SCMP_ACT_ERRNO",
              "architectures": ["SCMP_ARCH_X86_64"],
              "syscalls": [
                {
                  "names": [
                    "accept", "accept4", "access", "alarm", "arch_prctl", "bind", "brk",
                    "chdir", "chmod", "chown", "clock_getres", "clock_gettime", "clock_nanosleep",
                    "clone", "close", "connect", "dup", "dup2", "epoll_create", "epoll_ctl",
                    "epoll_pwait", "epoll_wait", "eventfd2", "execve", "exit", "exit_group",
                    "fchdir", "fchmod", "fchown", "fcntl", "fdatasync", "flock", "fork",
                    "fstat", "fsync", "ftruncate", "futex", "getcwd", "getdents", "getegid",
                    "geteuid", "getgid", "getpid", "getppid", "getrandom", "getrlimit",
                    "getsid", "getsockname", "getsockopt", "gettid", "gettimeofday", "getuid",
                    "inotify_add_watch", "inotify_init1", "ioctl", "kill", "listen", "lseek",
                    "lstat", "madvise", "mkdir", "mmap", "mprotect", "munmap", "nanosleep",
                    "newfstatat", "open", "openat", "pipe", "pipe2", "poll", "prctl", "pread64",
                    "prlimit64", "pwrite64", "read", "readlink", "readlinkat", "recvfrom",
                    "recvmsg", "rename", "renameat", "rt_sigaction", "rt_sigprocmask",
                    "rt_sigreturn", "sched_getaffinity", "sched_yield", "select", "sendfile",
                    "sendmsg", "sendto", "setgid", "setgroups", "setrlimit", "setsid",
                    "setsockopt", "setuid", "shutdown", "sigaltstack", "socket", "stat",
                    "statfs", "symlink", "symlinkat", "sync", "sysinfo", "tgkill", "time",
                    "times", "truncate", "umask", "uname", "unlink", "unlinkat", "utime",
                    "utimes", "vfork", "wait4", "waitpid", "write"
                  ],
                  "action": "SCMP_ACT_ALLOW"
                }
              ]
            }
            EOF
            
            # Stop and remove previous container
            $DOCKER_CMD stop calculator-app 2>/dev/null || true
            $DOCKER_CMD rm calculator-app 2>/dev/null || true
            
            # Pull latest image (disable content trust for pulling)
            DOCKER_CONTENT_TRUST=0 $DOCKER_CMD pull sainadh99/calculator-app:${{ env.BUILD_TAG }}
            
            # Create volume if it doesn't exist
            $DOCKER_CMD volume inspect calc-data >/dev/null 2>&1 || $DOCKER_CMD volume create calc-data
            
            # Create network if it doesn't exist
            $DOCKER_CMD network inspect calc-network >/dev/null 2>&1 || \
              $DOCKER_CMD network create --driver bridge \
              --opt com.docker.network.bridge.name=calc-br \
              --opt com.docker.network.bridge.enable_icc=false \
              --opt com.docker.network.bridge.enable_ip_masquerade=true \
              calc-network
            
            # First try with custom network, if that fails, try with host network as fallback
            echo "🚀 Starting container with custom network..."
            
            if $DOCKER_CMD run -d --name calculator-app --restart unless-stopped \
              --network calc-network \
              -p 80:3000 \
              --memory=256m --memory-swap=256m \
              --cpus=0.5 \
              --pids-limit=50 \
              --ulimit nofile=1024:1024 \
              --ulimit nproc=50:50 \
              --tmpfs /usr/src/app/tmp:rw,noexec,nosuid,nodev,size=50m \
              --tmpfs /tmp:rw,noexec,nosuid,nodev,size=20m \
              --tmpfs /var/tmp:rw,noexec,nosuid,nodev,size=10m \
              --security-opt no-new-privileges:true \
              --cap-drop ALL \
              --cap-add CHOWN \
              --cap-add SETGID \
              --cap-add SETUID \
              --cap-add NET_BIND_SERVICE \
              --user 1001:1001 \
              --hostname calculator-app \
              --env NODE_ENV=production \
              --env PORT=3000 \
              --health-cmd="wget --no-verbose --tries=1 --spider http://localhost:3000/ || exit 1" \
              --health-interval=30s \
              --health-timeout=10s \
              --health-retries=3 \
              --health-start-period=60s \
              --log-driver json-file \
              --log-opt max-size=10m \
              --log-opt max-file=3 \
              -v calc-data:/usr/src/app/data:rw \
              sainadh99/calculator-app:${{ env.BUILD_TAG }}; then
              echo "✅ Container started successfully"
            else
              echo "⚠️ Container failed to start with custom network, trying host network..."
              $DOCKER_CMD rm -f calculator-app 2>/dev/null || true
              
              $DOCKER_CMD run -d --name calculator-app --restart unless-stopped \
                --network host \
                --memory=256m --memory-swap=256m \
                --cpus=0.5 \
                --pids-limit=50 \
                --ulimit nofile=1024:1024 \
                --ulimit nproc=50:50 \
                --tmpfs /usr/src/app/tmp:rw,noexec,nosuid,nodev,size=50m \
                --tmpfs /tmp:rw,noexec,nosuid,nodev,size=20m \
                --tmpfs /var/tmp:rw,noexec,nosuid,nodev,size=10m \
                --security-opt no-new-privileges:true \
                --cap-drop ALL \
                --cap-add CHOWN \
                --cap-add SETGID \
                --cap-add SETUID \
                --cap-add NET_BIND_SERVICE \
                --user 1001:1001 \
                --hostname calculator-app \
                --env NODE_ENV=production \
                --env PORT=80 \
                --health-cmd="wget --no-verbose --tries=1 --spider http://localhost:80/ || exit 1" \
                --health-interval=30s \
                --health-timeout=10s \
                --health-retries=3 \
                --health-start-period=60s \
                --log-driver json-file \
                --log-opt max-size=10m \
                --log-opt max-file=3 \
                -v calc-data:/usr/src/app/data:rw \
                sainadh99/calculator-app:${{ env.BUILD_TAG }}
            fi
            
            # Wait for container to initialize
            echo "⏳ Waiting 15 seconds for container to initialize..."
            sleep 15
            
            # Verify container is running and get detailed status
            echo "📋 Container status check:"
            $DOCKER_CMD ps -a --filter name=calculator-app --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
            
            if ! $DOCKER_CMD ps | grep -q calculator-app; then
              echo "❌ Container failed to start"
              echo "📝 Container logs:"
              $DOCKER_CMD logs calculator-app 2>&1 || echo "No logs available"
              echo "🔍 Container inspect:"
              $DOCKER_CMD inspect calculator-app --format='{{.State.ExitCode}} - {{.State.Error}}' 2>/dev/null || echo "Cannot inspect"
              exit 1
            fi
            
            echo "✅ Container is running"

      # ---------------------------
      # 7️⃣ Container Status & Health Check
      # ---------------------------
      - name: Container Status & Health Check
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.GCP_VM_HOST }}
          username: ${{ secrets.GCP_VM_USERNAME }}
          key: ${{ secrets.GCP_VM_KEY }}
          port: 22
          timeout: 60s
          command_timeout: 10m
          script: |
            DOCKER_CMD="docker"
            if ! $DOCKER_CMD info >/dev/null 2>&1; then
              DOCKER_CMD="sudo docker"
            fi
            
            echo "🔍 Container diagnostics..."
            
            # Check if container is running
            echo "📋 Container status:"
            $DOCKER_CMD ps -a --filter name=calculator-app --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
            
            # Get container logs
            echo "📝 Container logs (last 50 lines):"
            $DOCKER_CMD logs --tail 50 calculator-app 2>&1 || echo "Failed to get logs"
            
            # Check container health
            echo "🏥 Container health status:"
            $DOCKER_CMD inspect calculator-app --format='{{.State.Health.Status}}' 2>/dev/null || echo "No health status available"
            
            # Check if container is actually running
            if ! $DOCKER_CMD ps | grep -q calculator-app; then
              echo "❌ Container is not running!"
              echo "🔍 Checking container inspect for exit reason:"
              $DOCKER_CMD inspect calculator-app --format='{{.State.ExitCode}} - {{.State.Error}}' 2>/dev/null || echo "Cannot inspect container"
              exit 1
            fi
            
            # Check network connectivity
            echo "🌐 Network diagnostics:"
            $DOCKER_CMD exec calculator-app netstat -tlnp 2>/dev/null || echo "Cannot check ports inside container"
            
            # Try internal health check first
            echo "🔍 Internal health check:"
            $DOCKER_CMD exec calculator-app curl -f http://localhost:3000/health 2>/dev/null || \
            $DOCKER_CMD exec calculator-app curl -f http://localhost:3000/ 2>/dev/null || \
            echo "Internal health check failed"
            
      - name: External Health Check
        run: |
          echo "🔍 Starting external health check..."
          HEALTH_CHECK_PASSED=false
          
          # Try different endpoints
          ENDPOINTS=("/" "/health")
          
          for endpoint in "${ENDPOINTS[@]}"; do
            echo "🎯 Testing endpoint: $endpoint"
            for i in {1..6}; do
              echo "Health check attempt $i/6 for $endpoint..."
              if curl -fs --max-time 10 --connect-timeout 5 "http://${{ secrets.GCP_VM_HOST }}$endpoint" >/dev/null 2>&1; then
                echo "✅ Health check passed for $endpoint!"
                HEALTH_CHECK_PASSED=true
                break 2
              fi
              echo "⏳ Waiting 10 seconds before retry..."
              sleep 10
            done
          done
          
          if [ "$HEALTH_CHECK_PASSED" = false ]; then
            echo "❌ External health check failed!"
            echo "🔍 Testing basic connectivity..."
            
            # Test if port is open
            if nc -zv ${{ secrets.GCP_VM_HOST }} 80 2>&1; then
              echo "✅ Port 80 is open"
            else
              echo "❌ Port 80 is not accessible"
            fi
            
            # Try to get response headers
            echo "🔍 Attempting to get response headers..."
            curl -I --max-time 10 "http://${{ secrets.GCP_VM_HOST }}" 2>&1 || echo "Failed to get headers"
            
            exit 1
          fi

      # ---------------------------
      # 8️⃣ Container Maintenance
      # ---------------------------
      - name: Container Maintenance
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.GCP_VM_HOST }}
          username: ${{ secrets.GCP_VM_USERNAME }}
          key: ${{ secrets.GCP_VM_KEY }}
          port: 22
          timeout: 60s
          command_timeout: 10m
          script: |
            DOCKER_CMD="docker"
            if ! $DOCKER_CMD info >/dev/null 2>&1; then
              DOCKER_CMD="sudo docker"
            fi
            
            echo "🧹 Cleaning up old containers..."
            $DOCKER_CMD container prune -f
            
            echo "🧹 Cleaning up old images..."
            OLD_IMAGES=$($DOCKER_CMD images sainadh99/calculator-app --format "table {{.Repository}}:{{.Tag}}\t{{.CreatedAt}}" | tail -n +2 | sort -k2 -r | tail -n +4 | awk '{print $1}')
            if [ -n "$OLD_IMAGES" ]; then 
              echo "Removing old images: $OLD_IMAGES"
              echo "$OLD_IMAGES" | xargs -r $DOCKER_CMD rmi --force || true
            fi
            
            $DOCKER_CMD image prune -f
            echo "✅ Maintenance completed"

      # ---------------------------
      # 9️⃣ Deployment Success Notification
      # ---------------------------
      - name: Deployment Success Notification
        run: |
          echo "🎉 Deployment successful!"
          echo "🏷️ Version: ${{ env.BUILD_TAG }}"
          echo "📦 App: Calculator App (Hardened)"
          echo "🌐 URL: http://${{ secrets.GCP_VM_HOST }}"
          echo "🔒 Security: Non-root, read-only FS, seccomp, limited resources"
          echo "⏰ Deployed at: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
