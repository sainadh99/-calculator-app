name: CI/CD Pipeline

on:
  push:
    branches:
      - master  # Trigger on direct push to master
  pull_request:
    types: [opened, synchronize, closed]  # PR triggers
  workflow_dispatch:  # Manual trigger

jobs:
  ci-deploy:
    runs-on: ubuntu-latest
    if: |
      (
        github.event_name == 'pull_request' &&
        (github.event.action == 'opened' || github.event.action == 'synchronize')
      ) ||
      (
        github.event_name == 'pull_request' &&
        github.event.action == 'closed' &&
        github.event.pull_request.merged == true &&
        github.event.pull_request.merged_by.login == 'sainadh99'
      ) ||
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'push'

    steps:
      # Step 0: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 1: PR CI checks
      - name: PR CI Check
        if: github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'synchronize')
        run: |
          echo "🔹 PR #${{ github.event.pull_request.number }} by ${{ github.event.pull_request.user.login }}"
          echo "🔍 Running CI checks..."
          echo "✅ CI checks completed successfully"
          echo "ℹ️ Deployment will only occur when merged by 'sainadh99'"

      # Step 2: Generate Build Number & Metadata
      - name: Generate Build Number & Metadata
        if: |
          (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && github.event.pull_request.merged_by.login == 'sainadh99') ||
          github.event_name == 'push' ||
          github.event_name == 'workflow_dispatch'
        id: build_number
        run: |
          BUILD_NUMBER=${{ github.run_number }}
          BUILD_TAG="build-${BUILD_NUMBER}"
          BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV
          echo "BUILD_TAG=$BUILD_TAG" >> $GITHUB_ENV
          echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV
          echo "🎯 Build #$BUILD_NUMBER, Tag: $BUILD_TAG, Date: $BUILD_DATE"

      # Step 3: Setup Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 4: Docker login
      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 5: Build & Push Docker Image
      - name: Build & Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            sainadh99/calculator-app:latest
            sainadh99/calculator-app:${{ env.BUILD_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_NUMBER=${{ env.BUILD_NUMBER }}
            BUILD_DATE=${{ env.BUILD_DATE }}
            GIT_COMMIT=${{ github.sha }}

      # Step 6: Verify required secrets
      - name: Verify Required Secrets
        run: |
          echo "✅ Checking required secrets..."
          echo "GCP_VM_HOST: ${{ secrets.GCP_VM_HOST != '' && 'SET' || 'MISSING' }}"
          echo "GCP_VM_USERNAME: ${{ secrets.GCP_VM_USERNAME != '' && 'SET' || 'MISSING' }}"
          echo "GCP_VM_KEY: ${{ secrets.GCP_VM_KEY != '' && 'SET' || 'MISSING' }}"
          echo "DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME != '' && 'SET' || 'MISSING' }}"
          echo "DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN != '' && 'SET' || 'MISSING' }}"

      # Step 7: Setup Docker on GCP VM
      - name: Setup Docker on GCP VM
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.GCP_VM_HOST }}
          username: ${{ secrets.GCP_VM_USERNAME }}
          key: ${{ secrets.GCP_VM_KEY }}
          port: 22
          timeout: 300s
          command_timeout: 10m
          script: |
            if ! command -v docker &>/dev/null; then
              sudo apt update && sudo apt install -y docker.io
              sudo systemctl enable --now docker
              sudo usermod -aG docker $USER || true
            fi
            docker --version

      # Step 8: Deploy Docker container
      - name: Deploy to GCP VM
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.GCP_VM_HOST }}
          username: ${{ secrets.GCP_VM_USERNAME }}
          key: ${{ secrets.GCP_VM_KEY }}
          port: 22
          timeout: 300s
          command_timeout: 15m
          script: |
            DOCKER_CMD=docker
            if ! docker info &>/dev/null && sudo docker info &>/dev/null; then
              DOCKER_CMD="sudo docker"
            fi
            $DOCKER_CMD pull sainadh99/calculator-app:${{ env.BUILD_TAG }}
            $DOCKER_CMD stop calculator-app || true
            $DOCKER_CMD rm calculator-app || true
            $DOCKER_CMD run -d \
              --name calculator-app \
              --restart unless-stopped \
              -p 80:3000 \
              --memory=512m \
              --cpus=1.0 \
              --read-only \
              --tmpfs /usr/src/app/tmp:rw,noexec,nosuid,size=100m \
              --tmpfs /usr/src/app/data:rw,noexec,nosuid,size=100m \
              --tmpfs /tmp:rw,noexec,nosuid,size=50m \
              --security-opt no-new-privileges:true \
              --cap-drop ALL \
              --cap-add CHOWN \
              --cap-add SETGID \
              --cap-add SETUID \
              --cap-add NET_BIND_SERVICE \
              --user 1001:1001 \
              sainadh99/calculator-app:${{ env.BUILD_TAG }}

      # Step 9: Health Check
      - name: Health Check
        run: |
          HEALTH_CHECK_PASSED=false
          for i in {1..5}; do
            if curl -fs --max-time 10 "http://${{ secrets.GCP_VM_HOST }}" >/dev/null; then
              HEALTH_CHECK_PASSED=true
              break
            fi
            sleep 10
          done
          if [ "$HEALTH_CHECK_PASSED" = true ]; then
            echo "✅ App is running!"
          else
            echo "⚠️ App not responding after 5 attempts."

      # Step 10: Cleanup old images on GCP VM
      - name: Container Maintenance
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.GCP_VM_HOST }}
          username: ${{ secrets.GCP_VM_USERNAME }}
          key: ${{ secrets.GCP_VM_KEY }}
          port: 22
          timeout: 300s
          script: |
            DOCKER_CMD=docker
            if ! docker info &>/dev/null && sudo docker info &>/dev/null; then
              DOCKER_CMD="sudo docker"
            fi
            $DOCKER_CMD system prune -f || true

      # Step 11: Deployment Success Notification
      - name: Deployment Success
        run: |
          echo "🎉 Deployment completed successfully!"
          echo "Build: #${{ env.BUILD_NUMBER }}, Tag: ${{ env.BUILD_TAG }}"
          echo "App URL: http://${{ secrets.GCP_VM_HOST }}"
