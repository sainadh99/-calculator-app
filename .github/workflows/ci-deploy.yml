name: CI/CD Pipeline

on:
  pull_request:
    types: [opened, synchronize, closed]  # CI checks for opened/sync, deployment on merged/closed
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    if: |
      # 1Ô∏è‚É£ CI check for PR opened or updated
      (github.event_name == 'pull_request' &&
       (github.event.action == 'opened' || github.event.action == 'synchronize')) ||
      # 2Ô∏è‚É£ Deployment only if PR merged by sainadh99
      (github.event_name == 'pull_request' &&
       github.event.action == 'closed' &&
       github.event.pull_request.merged == true &&
       github.base_ref == 'master' &&
       github.actor == 'sainadh99')

    steps:
      # Step 0: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 1: Generate Build Number & Metadata (only for merged PR by sainadh99)
      - name: Generate Build Number & Metadata
        if: github.event.pull_request.merged == true && github.actor == 'sainadh99'
        id: build_number
        run: |
          BUILD_NUMBER=${{ github.run_number }}
          BUILD_TAG="build-${BUILD_NUMBER}"
          BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV
          echo "BUILD_TAG=$BUILD_TAG" >> $GITHUB_ENV
          echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV
          echo "üî¢ Build Number: $BUILD_NUMBER"
          echo "üè∑Ô∏è Build Tag: $BUILD_TAG"
          echo "üìÖ Build Date: $BUILD_DATE"

      # Step 2: Set up Docker Buildx (only for merged PR by sainadh99)
      - name: Set up Docker Buildx
        if: github.event.pull_request.merged == true && github.actor == 'sainadh99'
        uses: docker/setup-buildx-action@v3

      # Step 3: Log in to DockerHub
      - name: Log in to DockerHub
        if: github.event.pull_request.merged == true && github.actor == 'sainadh99'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 4: Build & push Docker image
      - name: Build and Push Docker Image
        if: github.event.pull_request.merged == true && github.actor == 'sainadh99'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            sainadh99/calculator-app:latest
            sainadh99/calculator-app:${{ env.BUILD_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_NUMBER=${{ env.BUILD_NUMBER }}
            BUILD_DATE=${{ env.BUILD_DATE }}
            GIT_COMMIT=${{ github.sha }}

      # Step 5: Verify required secrets & runtime info
      - name: Verify Configuration
        if: github.event.pull_request.merged == true && github.actor == 'sainadh99'
        run: |
          echo "‚úÖ Checking required secrets..."
          echo "GCP_VM_HOST: ${{ secrets.GCP_VM_HOST != '' && 'SET' || 'MISSING' }}"
          echo "GCP_VM_USERNAME: ${{ secrets.GCP_VM_USERNAME != '' && 'SET' || 'MISSING' }}"
          echo "GCP_VM_KEY: ${{ secrets.GCP_VM_KEY != '' && 'SET' || 'MISSING' }}"
          echo "DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME != '' && 'SET' || 'MISSING' }}"
          echo "DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN != '' && 'SET' || 'MISSING' }}"
          echo ""
          echo "üî¢ Build Number: ${{ env.BUILD_NUMBER }}"
          echo "üè∑Ô∏è Build Tag: ${{ env.BUILD_TAG }}"
          echo "üìÖ Build Date: ${{ env.BUILD_DATE }}"
          echo "üîÑ Trigger: ${{ github.event_name }}"
          echo "üë§ Actor: ${{ github.actor }}"

      # Step 6: Setup Docker on VM
      - name: Setup Docker on GCP VM
        if: github.event.pull_request.merged == true && github.actor == 'sainadh99'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.GCP_VM_HOST }}
          username: ${{ secrets.GCP_VM_USERNAME }}
          key: ${{ secrets.GCP_VM_KEY }}
          port: 22
          timeout: 300s
          command_timeout: 10m
          script: |
            if ! command -v docker &> /dev/null; then
              sudo apt update
              sudo apt install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker $USER || true
            else
              sudo systemctl start docker || true
            fi
            docker --version || echo "‚ö†Ô∏è Docker command not available"

      # Step 7: Deploy Docker container
      - name: Deploy to GCP VM
        if: github.event.pull_request.merged == true && github.actor == 'sainadh99'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.GCP_VM_HOST }}
          username: ${{ secrets.GCP_VM_USERNAME }}
          key: ${{ secrets.GCP_VM_KEY }}
          port: 22
          timeout: 60s
          command_timeout: 15m
          script: |
            sudo systemctl start docker || true
            sleep 5
            DOCKER_CMD="docker"
            echo "üì¶ Pulling image: sainadh99/calculator-app:${{ env.BUILD_TAG }}"
            eval "$DOCKER_CMD pull sainadh99/calculator-app:${{ env.BUILD_TAG }}"
            eval "$DOCKER_CMD stop calculator-app" 2>/dev/null || true
            eval "$DOCKER_CMD rm calculator-app" 2>/dev/null || true
            eval "$DOCKER_CMD run -d \
              --name calculator-app \
              --restart unless-stopped \
              -p 80:3000 \
              --memory=512m \
              --cpus=1.0 \
              --read-only \
              --tmpfs /usr/src/app/tmp:rw,noexec,nosuid,size=100m \
              --tmpfs /usr/src/app/data:rw,noexec,nosuid,size=100m \
              --tmpfs /tmp:rw,noexec,nosuid,size=50m \
              --security-opt no-new-privileges:true \
              --cap-drop ALL \
              --cap-add CHOWN \
              --cap-add SETGID \
              --cap-add SETUID \
              --cap-add NET_BIND_SERVICE \
              --user 1001:1001 \
              sainadh99/calculator-app:${{ env.BUILD_TAG }}"

      # Step 8: Health Check
      - name: Health Check
        if: github.event.pull_request.merged == true && github.actor == 'sainadh99'
        run: |
          sleep 30
          HEALTH_CHECK_PASSED=false
          for i in {1..5}; do
            for url in "http://${{ secrets.GCP_VM_HOST }}" "http://${{ secrets.GCP_VM_HOST }}:80" "http://${{ secrets.GCP_VM_HOST }}/health"; do
              if curl -fs --max-time 10 "$url" >/dev/null; then
                HEALTH_CHECK_PASSED=true
                break 2
              fi
            done
            [ $i -lt 5 ] && sleep 10
          done
          if [ "$HEALTH_CHECK_PASSED" = false ]; then
            echo "‚ö†Ô∏è Health check failed. Inspect VM container logs."

      # Step 9: Container Maintenance
      - name: Container Maintenance
        if: github.event.pull_request.merged == true && github.actor == 'sainadh99'
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.GCP_VM_HOST }}
          username: ${{ secrets.GCP_VM_USERNAME }}
          key: ${{ secrets.GCP_VM_KEY }}
          port: 22
          timeout: 60s
          script: |
            DOCKER_CMD="docker"
            eval "$DOCKER_CMD system prune -f" || true
            eval "$DOCKER_CMD images sainadh99/calculator-app --format 'table {{.Repository}}\t{{.Tag}}\t{{.ID}}\t{{.CreatedAt}}\t{{.Size}}'"
            eval "$DOCKER_CMD ps --filter name=calculator-app --format 'table {{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}'"

      # Step 10: Deployment Success Notification
      - name: Deployment Success Notification
        if: github.event.pull_request.merged == true && github.actor == 'sainadh99'
        run: |
          echo "üéâ Deployment completed successfully!"
          echo "Build: ${{ env.BUILD_TAG }}"
          echo "Actor: ${{ github.actor }}"
          echo "PR #${{ github.event.pull_request.number }} by ${{ github.event.pull_request.user.login }}"
          echo "App URL: http://${{ secrets.GCP_VM_HOST }}"
