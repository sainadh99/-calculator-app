name: Secure CI/CD Pipeline

on:
  pull_request:
    types: [closed]

env:
  DOCKER_BUILDKIT: 1

jobs:
  deploy:
    runs-on: ubuntu-latest
    # Only run when PR is merged by sainadh99
    if: github.event.pull_request.merged == true && github.event.pull_request.merged_by.login == 'sainadh99'

    steps:
      # ---------------------------
      # 1️⃣ Checkout code
      # ---------------------------
      - name: Checkout code
        uses: actions/checkout@v4

      # ---------------------------
      # 2️⃣ Generate Build Metadata
      # ---------------------------
      - name: Generate Build Number & Metadata
        id: build_number
        run: |
          BUILD_NUMBER=${{ github.run_number }}
          BUILD_TAG="build-${BUILD_NUMBER}"
          BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV
          echo "BUILD_TAG=$BUILD_TAG" >> $GITHUB_ENV
          echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV
          
          echo "🎯 Deployment authorized - PR #${{ github.event.pull_request.number }} merged by sainadh99"
          echo "🔢 Build Number: $BUILD_NUMBER"
          echo "🏷️ Build Tag: $BUILD_TAG"
          echo "📅 Build Date: $BUILD_DATE"

      # ---------------------------
      # 3️⃣ Set up Docker Buildx
      # ---------------------------
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # ---------------------------
      # 4️⃣ Docker Login
      # ---------------------------
      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # ---------------------------
      # 5️⃣ Build & Push Docker Image
      # ---------------------------
      - name: Build & Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            sainadh99/calculator-app:latest
            sainadh99/calculator-app:${{ env.BUILD_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_NUMBER=${{ env.BUILD_NUMBER }}
            BUILD_DATE=${{ env.BUILD_DATE }}
            GIT_COMMIT=${{ github.sha }}

      # ---------------------------
      # 6️⃣ Deploy Secure Container to GCP VM
      # ---------------------------
      - name: Deploy Secure Container to GCP VM
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.GCP_VM_HOST }}
          username: ${{ secrets.GCP_VM_USERNAME }}
          key: ${{ secrets.GCP_VM_KEY }}
          port: 22
          timeout: 60s
          command_timeout: 15m
          script: |
            DOCKER_CMD="docker"
            if ! $DOCKER_CMD info >/dev/null 2>&1; then
              DOCKER_CMD="sudo docker"
            fi

            echo "📦 Pulling Docker image: sainadh99/calculator-app:${{ env.BUILD_TAG }}"
            $DOCKER_CMD pull sainadh99/calculator-app:${{ env.BUILD_TAG }}

            echo "🛑 Stopping old container (if exists)"
            $DOCKER_CMD stop calculator-app || true
            $DOCKER_CMD rm calculator-app || true

            # Ensure persistent volume exists
            if ! $DOCKER_CMD volume inspect calc-data >/dev/null 2>&1; then
              echo "📁 Creating persistent Docker volume: calc-data"
              $DOCKER_CMD volume create calc-data
            fi

            # Create restricted network
            if ! $DOCKER_CMD network inspect calc-network >/dev/null 2>&1; then
              echo "🌐 Creating restricted Docker network: calc-network"
              $DOCKER_CMD network create --driver bridge \
                --opt com.docker.network.bridge.name=calc-br \
                --opt com.docker.network.bridge.enable_icc=false \
                --opt com.docker.network.bridge.enable_ip_masquerade=true \
                calc-network
            fi

            echo "▶️ Starting new secure container"
            $DOCKER_CMD run -d --name calculator-app --restart unless-stopped \
              --network calc-network \
              -p 80:3000 \
              --memory=256m --memory-swap=256m --cpus=0.5 \
              --pids-limit=100 \
              --ulimit nofile=1024:1024 \
              --ulimit nproc=64:64 \
              --read-only \
              --tmpfs /usr/src/app/tmp:rw,noexec,nosuid,nodev,size=50m \
              --tmpfs /tmp:rw,noexec,nosuid,nodev,size=20m \
              --tmpfs /var/tmp:rw,noexec,nosuid,nodev,size=10m \
              --security-opt no-new-privileges:true \
              --security-opt seccomp:unconfined \
              --security-opt apparmor:docker-default \
              --cap-drop ALL \
              --cap-add CHOWN \
              --cap-add SETGID \
              --cap-add SETUID \
              --cap-add NET_BIND_SERVICE \
              --user 1001:1001 \
              --hostname calculator-app \
              --env NODE_ENV=production \
              --env PORT=3000 \
              --health-cmd="curl -f http://localhost:3000/health || exit 1" \
              --health-interval=30s \
              --health-timeout=10s \
              --health-retries=3 \
              --health-start-period=40s \
              --log-driver json-file \
              --log-opt max-size=10m \
              --log-opt max-file=3 \
              -v calc-data:/usr/src/app/data:rw \
              sainadh99/calculator-app:${{ env.BUILD_TAG }}

            echo "✅ Secure container deployed successfully"

      # ---------------------------
      # 7️⃣ Health Check
      # ---------------------------
      - name: Health Check
        run: |
          HEALTH_CHECK_PASSED=false
          echo "🏥 Starting health checks for Calculator App..."
          
          for i in {1..5}; do
            echo "🔍 Health check attempt $i/5"
            
            if curl -fs --max-time 10 "http://${{ secrets.GCP_VM_HOST }}" >/dev/null; then
              echo "✅ App is running!"
              HEALTH_CHECK_PASSED=true
              break
            fi
            
            if [ $i -lt 5 ]; then
              echo "⏳ Waiting 15 seconds before retry..."
              sleep 15
            fi
          done

          if [ "$HEALTH_CHECK_PASSED" = false ]; then
            echo "❌ Health checks failed after 5 attempts."
            exit 1
          fi

      # ---------------------------
      # 8️⃣ Container Maintenance
      # ---------------------------
      - name: Container Maintenance
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.GCP_VM_HOST }}
          username: ${{ secrets.GCP_VM_USERNAME }}
          key: ${{ secrets.GCP_VM_KEY }}
          port: 22
          timeout: 60s
          command_timeout: 10m
          script: |
            DOCKER_CMD="docker"
            if ! $DOCKER_CMD info >/dev/null 2>&1; then
              DOCKER_CMD="sudo docker"
            fi

            echo "🧹 Cleaning up old containers and images..."
            
            # Remove stopped containers
            $DOCKER_CMD container prune -f
            
            # Remove old calculator-app images (keep latest 2 versions)
            OLD_IMAGES=$($DOCKER_CMD images sainadh99/calculator-app --format "table {{.Repository}}:{{.Tag}}\t{{.CreatedAt}}" | tail -n +2 | sort -k2 -r | tail -n +3 | awk '{print $1}')
            if [ -n "$OLD_IMAGES" ]; then
              echo "🗑️ Removing old images: $OLD_IMAGES"
              echo "$OLD_IMAGES" | xargs -r $DOCKER_CMD rmi || true
            fi
            
            # Remove dangling images
            $DOCKER_CMD image prune -f
            
            # Preserve persistent volume calc-data
            echo "💾 Preserving persistent data volume: calc-data"
            
            echo "✅ Container maintenance completed"

      # ---------------------------
      # 9️⃣ Deployment Success Notification
      # ---------------------------
      - name: Deployment Success Notification
        run: |
          echo "🎉 SECURE DEPLOYMENT SUCCESSFUL!"
          echo "════════════════════════════════════════"
          echo "📦 Application: Calculator App (Hardened)"
          echo "🏷️ Version: ${{ env.BUILD_TAG }}"
          echo "🔢 Build Number: ${{ env.BUILD_NUMBER }}"
          echo "📅 Build Date: ${{ env.BUILD_DATE }}"
          echo "🌐 URL: http://${{ secrets.GCP_VM_HOST }}"
          echo "👤 Deployed by: ${{ github.event.pull_request.merged_by.login }}"
          echo "📝 PR: #${{ github.event.pull_request.number }} - ${{ github.event.pull_request.title }}"
          echo "🔗 Commit: ${{ github.sha }}"
          echo ""
          echo "🔒 SECURITY FEATURES ENABLED:"
          echo "  ✅ Container running as non-root user (1001:1001)"
          echo "  ✅ Read-only root filesystem"
          echo "  ✅ All capabilities dropped except essential ones"
          echo "  ✅ Resource limits: 256MB RAM, 0.5 CPU, 100 PIDs"
          echo "  ✅ Network isolation with custom bridge"
          echo "════════════════════════════════════════"
          echo ""
          echo "✅ All deployment stages completed successfully!"
          echo "🔍 Health checks passed"
          echo "🧹 Container maintenance completed"
          echo "💾 Persistent data preserved"
