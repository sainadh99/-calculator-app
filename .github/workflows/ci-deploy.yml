name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, closed]
  workflow_dispatch:

jobs:
  ci-deploy:
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'synchronize')) ||
      (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && github.event.pull_request.merged_by.login == 'sainadh99') ||
      (github.event_name == 'push' && github.ref == 'refs/heads/master')

    steps:
      # ---------------------------
      # 1Ô∏è‚É£ Checkout code (Always runs)
      # ---------------------------
      - name: Checkout code
        uses: actions/checkout@v4

      # ---------------------------
      # 2Ô∏è‚É£ PR CI Check (Only for PRs)
      # ---------------------------
      - name: PR CI Check
        if: github.event_name == 'pull_request' && (github.event.action == 'opened' || github.event.action == 'synchronize')
        run: |
          echo "üîπ PR #${{ github.event.pull_request.number }} by ${{ github.event.pull_request.user.login }}"
          echo "üîç Running CI checks..."
          echo " - Checking code syntax"
          echo " - Running linting (if configured)"
          echo " - Running tests (if configured)"
          echo "‚úÖ CI checks completed successfully"
          echo ""
          echo "‚ÑπÔ∏è Deployment will only occur when merged by 'sainadh99' or pushed to master"

      # ---------------------------
      # 3Ô∏è‚É£ Generate Build Metadata (For deployments only)
      # ---------------------------
      - name: Generate Build Number & Metadata
        if: |
          (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && github.event.pull_request.merged_by.login == 'sainadh99') ||
          (github.event_name == 'push' && github.ref == 'refs/heads/master')
        id: build_number
        run: |
          BUILD_NUMBER=${{ github.run_number }}
          BUILD_TAG="build-${BUILD_NUMBER}"
          BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV
          echo "BUILD_TAG=$BUILD_TAG" >> $GITHUB_ENV
          echo "BUILD_DATE=$BUILD_DATE" >> $GITHUB_ENV
          
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "üéØ Deployment authorized - PR merged by sainadh99"
          else
            echo "üéØ Deployment authorized - Direct push to master"
          fi
          echo "üî¢ Build Number: $BUILD_NUMBER"
          echo "üè∑Ô∏è Build Tag: $BUILD_TAG"
          echo "üìÖ Build Date: $BUILD_DATE"

      # ---------------------------
      # 4Ô∏è‚É£ Set up Docker Buildx (For deployments only)
      # ---------------------------
      - name: Set up Docker Buildx
        if: |
          (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && github.event.pull_request.merged_by.login == 'sainadh99') ||
          (github.event_name == 'push' && github.ref == 'refs/heads/master')
        uses: docker/setup-buildx-action@v3

      # ---------------------------
      # 5Ô∏è‚É£ Docker Login (For deployments only)
      # ---------------------------
      - name: Docker Login
        if: |
          (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && github.event.pull_request.merged_by.login == 'sainadh99') ||
          (github.event_name == 'push' && github.ref == 'refs/heads/master')
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # ---------------------------
      # 6Ô∏è‚É£ Build & Push Docker Image (For deployments only)
      # ---------------------------
      - name: Build & Push Docker Image
        if: |
          (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && github.event.pull_request.merged_by.login == 'sainadh99') ||
          (github.event_name == 'push' && github.ref == 'refs/heads/master')
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            sainadh99/calculator-app:latest
            sainadh99/calculator-app:${{ env.BUILD_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_NUMBER=${{ env.BUILD_NUMBER }}
            BUILD_DATE=${{ env.BUILD_DATE }}
            GIT_COMMIT=${{ github.sha }}

      # ---------------------------
      # 7Ô∏è‚É£ Verify Required Secrets (For deployments only)
      # ---------------------------
      - name: Verify Required Secrets
        if: |
          (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && github.event.pull_request.merged_by.login == 'sainadh99') ||
          (github.event_name == 'push' && github.ref == 'refs/heads/master')
        run: |
          echo "‚úÖ Checking required secrets..."
          echo "GCP_VM_HOST: ${{ secrets.GCP_VM_HOST != '' && 'SET' || 'MISSING' }}"
          echo "GCP_VM_USERNAME: ${{ secrets.GCP_VM_USERNAME != '' && 'SET' || 'MISSING' }}"
          echo "GCP_VM_KEY: ${{ secrets.GCP_VM_KEY != '' && 'SET' || 'MISSING' }}"
          echo "DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME != '' && 'SET' || 'MISSING' }}"
          echo "DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN != '' && 'SET' || 'MISSING' }}"
          echo ""
          echo "üî¢ Build Number: ${{ env.BUILD_NUMBER }}"
          echo "üè∑Ô∏è Build Tag: ${{ env.BUILD_TAG }}"
          echo "üìÖ Build Date: ${{ env.BUILD_DATE }}"

      # ---------------------------
      # 8Ô∏è‚É£ Setup Docker on GCP VM (For deployments only)
      # ---------------------------
      - name: Setup Docker on GCP VM
        if: |
          (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && github.event.pull_request.merged_by.login == 'sainadh99') ||
          (github.event_name == 'push' && github.ref == 'refs/heads/master')
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.GCP_VM_HOST }}
          username: ${{ secrets.GCP_VM_USERNAME }}
          key: ${{ secrets.GCP_VM_KEY }}
          port: 22
          timeout: 300s
          command_timeout: 10m
          script: |
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              sudo apt update
              sudo apt install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker $USER || true
            else
              echo "Docker already installed"
              sudo systemctl start docker || true
            fi
            docker --version || echo "‚ö†Ô∏è Docker command not available"

      # ---------------------------
      # 9Ô∏è‚É£ Deploy to GCP VM (For deployments only)
      # ---------------------------
      - name: Deploy to GCP VM
        if: |
          (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && github.event.pull_request.merged_by.login == 'sainadh99') ||
          (github.event_name == 'push' && github.ref == 'refs/heads/master')
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.GCP_VM_HOST }}
          username: ${{ secrets.GCP_VM_USERNAME }}
          key: ${{ secrets.GCP_VM_KEY }}
          port: 22
          timeout: 60s
          command_timeout: 15m
          script: |
            DOCKER_CMD="docker"
            if ! $DOCKER_CMD info >/dev/null 2>&1; then
              DOCKER_CMD="sudo docker"
            fi

            echo "üì¶ Pulling Docker image: sainadh99/calculator-app:${{ env.BUILD_TAG }}"
            $DOCKER_CMD pull sainadh99/calculator-app:${{ env.BUILD_TAG }}

            echo "üõë Stopping old container (if exists)"
            $DOCKER_CMD stop calculator-app || true
            $DOCKER_CMD rm calculator-app || true

            # Ensure persistent volume exists
            if ! $DOCKER_CMD volume inspect calc-data >/dev/null 2>&1; then
              echo "üìÅ Creating persistent Docker volume: calc-data"
              $DOCKER_CMD volume create calc-data
            fi

            echo "‚ñ∂Ô∏è Starting new container"
            $DOCKER_CMD run -d --name calculator-app --restart unless-stopped \
              -p 80:3000 \
              --memory=512m --cpus=1.0 \
              --read-only \
              --tmpfs /usr/src/app/tmp:rw,noexec,nosuid,size=100m \
              --tmpfs /tmp:rw,noexec,nosuid,size=50m \
              --security-opt no-new-privileges:true \
              --cap-drop ALL --cap-add CHOWN --cap-add SETGID --cap-add SETUID --cap-add NET_BIND_SERVICE \
              --user 1001:1001 \
              -v calc-data:/usr/src/app/data \
              sainadh99/calculator-app:${{ env.BUILD_TAG }}

            echo "‚úÖ Container deployed successfully"

      # ---------------------------
      # üîü Health Check (For deployments only)
      # ---------------------------
      - name: Health Check
        if: |
          (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && github.event.pull_request.merged_by.login == 'sainadh99') ||
          (github.event_name == 'push' && github.ref == 'refs/heads/master')
        run: |
          HEALTH_CHECK_PASSED=false
          echo "üè• Starting health checks for Calculator App..."
          
          for i in {1..5}; do
            echo "üîç Health check attempt $i/5"
            if curl -fs --max-time 10 "http://${{ secrets.GCP_VM_HOST }}" >/dev/null; then
              HEALTH_CHECK_PASSED=true
              break
            fi
            if [ $i -lt 5 ]; then
              echo "‚è≥ Waiting 10 seconds before retry..."
              sleep 10
            fi
          done

          if [ "$HEALTH_CHECK_PASSED" = true ]; then
            echo "‚úÖ App is running!"
          else
            echo "‚ö†Ô∏è App not responding after 5 attempts."
            exit 1
          fi

      # ---------------------------
      # 1Ô∏è‚É£1Ô∏è‚É£ Container Maintenance (For deployments only)
      # ---------------------------
      - name: Container Maintenance
        if: |
          (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && github.event.pull_request.merged_by.login == 'sainadh99') ||
          (github.event_name == 'push' && github.ref == 'refs/heads/master')
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.GCP_VM_HOST }}
          username: ${{ secrets.GCP_VM_USERNAME }}
          key: ${{ secrets.GCP_VM_KEY }}
          port: 22
          timeout: 60s
          command_timeout: 10m
          script: |
            DOCKER_CMD="docker"
            if ! $DOCKER_CMD info >/dev/null 2>&1; then
              DOCKER_CMD="sudo docker"
            fi

            echo "üßπ Cleaning up old containers and images..."
            
            # Remove stopped containers (excluding running ones)
            $DOCKER_CMD container prune -f
            
            # Remove old calculator-app images (keep latest 3 versions)
            OLD_IMAGES=$($DOCKER_CMD images sainadh99/calculator-app --format "table {{.Repository}}:{{.Tag}}\t{{.CreatedAt}}" | tail -n +2 | sort -k2 -r | tail -n +4 | awk '{print $1}')
            if [ -n "$OLD_IMAGES" ]; then
              echo "Removing old images: $OLD_IMAGES"
              echo "$OLD_IMAGES" | xargs -r $DOCKER_CMD rmi || true
            fi
            
            # Remove dangling images
            $DOCKER_CMD image prune -f
            
            # DON'T prune volumes since we're using persistent volume calc-data
            # $DOCKER_CMD volume prune -f  # <-- COMMENTED OUT
            
            # Clean up build cache and other unused data
            $DOCKER_CMD system prune -f --volumes=false
            
            echo "‚úÖ Container maintenance completed"
            echo "üìä Disk usage after cleanup:"
            $DOCKER_CMD system df

      # ---------------------------
      # 1Ô∏è‚É£2Ô∏è‚É£ Deployment Success Notification (For deployments only)
      # ---------------------------
      - name: Deployment Success Notification
        if: |
          (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true && github.event.pull_request.merged_by.login == 'sainadh99') ||
          (github.event_name == 'push' && github.ref == 'refs/heads/master')
        run: |
          echo "üéâ DEPLOYMENT SUCCESSFUL!"
          echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          echo "üì¶ Application: Calculator App"
          echo "üè∑Ô∏è Version: ${{ env.BUILD_TAG }}"
          echo "üî¢ Build Number: ${{ env.BUILD_NUMBER }}"
          echo "üìÖ Build Date: ${{ env.BUILD_DATE }}"
          echo "üåê URL: http://${{ secrets.GCP_VM_HOST }}"
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "üë§ Deployed by: ${{ github.event.pull_request.merged_by.login }}"
            echo "üìù PR: #${{ github.event.pull_request.number }} - ${{ github.event.pull_request.title }}"
          else
            echo "üë§ Deployed by: ${{ github.actor }}"
            echo "üìù Trigger: Direct push to master"
          fi
          echo "üîó Commit: ${{ github.sha }}"
          echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          echo ""
          echo "‚úÖ All deployment stages completed successfully!"
          echo "üîç Health checks passed"
          echo "üßπ Container maintenance completed"
          echo "üíæ Persistent data preserved"
          echo ""
          echo "Next steps:"
          echo "- Monitor application at http://${{ secrets.GCP_VM_HOST }}"
          echo "- Check logs if needed: docker logs calculator-app"
          echo "- View container status: docker ps"
