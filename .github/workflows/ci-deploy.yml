name: Beginner Secure CI/CD Pipeline

# ðŸš€ When does this pipeline run?
on:
  push:
    branches:
      - master         # Runs when you push to master
  pull_request:        # Runs when a PR is opened/updated/merged
  workflow_dispatch:   # Can run manually from GitHub Actions tab

jobs:
  # ========================
  # 1. Security Scanning Job
  # ========================
  security-scan:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Get the source code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Check Dockerfile for best practices
      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        continue-on-error: true  # Donâ€™t fail pipeline for lint issues
        with:
          dockerfile: Dockerfile
          failure-threshold: error

      # Step 3: Scan code for secrets (like passwords/tokens)
      - name: Secrets Scan
        uses: trufflesecurity/trufflehog@main
        continue-on-error: true
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --only-verified

  # ========================
  # 2. Build & Deploy Job
  # ========================
  build-and-deploy:
    needs: security-scan   # Run only after security checks
    runs-on: ubuntu-latest

    steps:
      # Step 1: Get source code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Generate build number (for tagging Docker image)
      - name: Generate Build Number
        run: echo "BUILD_NUMBER=${{ github.run_number }}" >> $GITHUB_ENV

      # Step 3: Set up Docker Buildx (for advanced builds)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 4: Login to DockerHub (credentials stored in GitHub secrets)
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 5: Build Docker image
      - name: Build Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          load: true   # Load image locally
          tags: |
            sainadh99/calculator-app:latest
            sainadh99/calculator-app:build-${{ env.BUILD_NUMBER }}

      # Step 6: Run vulnerability scan with Trivy (non-blocking)
      - name: Run Trivy Scan
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          image-ref: sainadh99/calculator-app:latest
          format: 'table'
          severity: 'CRITICAL,HIGH'
          exit-code: '0'

      # Step 7: Push Docker image to DockerHub
      - name: Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            sainadh99/calculator-app:latest
            sainadh99/calculator-app:build-${{ env.BUILD_NUMBER }}

      # Step 8: Setup SSH key to connect to GCP VM
      - name: Setup SSH key
        run: |
          echo "${{ secrets.GCP_VM_KEY }}" > gcp_key
          chmod 600 gcp_key

      # Step 9: Deploy container to GCP VM
      - name: Deploy to GCP VM
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.GCP_VM_HOST }}
          username: ${{ secrets.GCP_VM_USERNAME }}
          key: ${{ secrets.GCP_VM_KEY }}
          script: |
            echo "Pulling latest Docker image..."
            docker pull sainadh99/calculator-app:latest
            
            echo "Stopping old container..."
            docker stop calculator-app || true
            docker rm calculator-app || true

            echo "Starting new container..."
            docker run -d \
              --name calculator-app \
              -p 80:80 \
              sainadh99/calculator-app:latest

      # Step 10: Health check (make sure app is running)
      - name: Health Check
        run: |
          sleep 10
          curl -f http://${{ secrets.GCP_VM_HOST }} || exit 1
